// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

/// User model (for authors, admins, clients)
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String   // hash
  role      String     @default("USER") // ADMIN, EDITOR
  is_inbuilt Boolean  @default(false) // true for seeded users
  posts     Post[]   @relation("AuthorPosts")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Blog Post
model Post {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  content     String      // markdown or rich text
  excerpt     String?     // short preview
  coverImage  String?     // optional thumbnail
  published   Boolean     @default(false)
  publishedAt DateTime?
  
  // relations
  author      User        @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId    String
  categories  PostCategory[]
  tags        PostTag[]
  // comments    Comment[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

/// Categories
model Category {
  id        String         @id @default(uuid())
  name      String
  slug      String         @unique
  posts     PostCategory[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

/// Tags (more flexible than categories)
model Tag {
  id        String      @id @default(uuid())
  name      String
  slug      String      @unique
  posts     PostTag[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

/// Many-to-Many relations
model PostCategory {
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([postId, categoryId])
}

model PostTag {
  post   Post @relation(fields: [postId], references: [id])
  postId String
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([postId, tagId])
}

/// Comments system
// model Comment {
//   id        String   @id @default(uuid())
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  String?
//   content   String
//   approved  Boolean  @default(false)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

/// User Roles
// enum Role {
//   ADMIN
//   EDITOR
//   USER
// }